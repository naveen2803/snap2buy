<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" actionBarVisible="false"
		creationComplete="view1_creationCompleteHandler(event)" xmlns:local="*">
	<fx:Declarations>
		<!--<s:Fade id="fadePreview" target="{preview}" duration="800" alphaFrom="1" alphaTo="0"/>-->
		
			<s:HTTPService id="servGetProductDetails" resultFormat="text" method="GET"
						   result="getProductDetails_resultHandler(event)" fault="getProductDetails_faultHandler(event)"/>
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			import ane.ANEFunctions;
			
			import components.EmptyStarLabel;
			import components.FullStarLabel;
			import components.HalfStarLabel;
			import components.TickLabel;
			
			import dto.ProductDetails;
			
			import org.osmf.layout.ScaleMode;
			
			import utils.PointSet;
			import utils.Polygon;
			
			private var screenHeight:Number;
			private var screenWidth:Number;
			private var previewHeight:Number = 150;
			private var previewWidth:Number = 150;
			private var pointerWidth:Number = 50;
			private var pointerHeight:Number = 50;
			private var baseUrl:String = "http://snap2buy.com:8080/Snap2Buy-1.0/service/S2B/";
			private var _arrPolygons:Array = [];
			
			private var actualImageWidth:Number;
			private var actualImageHeight:Number;
			
			private var scaleXFactor:Number;
			private var scaleYFactor:Number;
			private var selectedProduct:Polygon;
			private var isImageRotated:Boolean = false;
			
			[Bindable] 
			private var _objProductDetails:ProductDetails;
			
			override protected function createChildren():void
			{
				super.createChildren();
			}
			
		
			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				img.addEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
			}
			
			private function loadSampleImage():void
			{
				
				
				
//				if (WebP.isSupported)
//				{
//					
//					// Find a file packaged with the application
//					//var file:File = File.applicationDirectory.resolvePath( "image.webp" );
//					var file:File = File.applicationDirectory.resolvePath( "assets/images/sampleShelf.webp" );
//					var fs:FileStream = new FileStream();
//					fs.open( file, FileMode.READ );
//					var data:ByteArray = new ByteArray();
//					fs.readBytes( data, 0, fs.bytesAvailable );
//					fs.close();
//					
//					var decodedData:ByteArray = new ByteArray();
//					
//					var success:Boolean = WebP.service.parseWebP( data, decodedData );
//					var rect:Rectangle = new Rectangle( 0, 0, WebP.service.width, WebP.service.height );
//					var bd:BitmapData = new BitmapData( WebP.service.width, WebP.service.height, true );
//					bd.setPixels( rect, decodedData );
//					img.source = new Bitmap(bd);
//					
///*					
//					if (success) 
//					{
//						var rect:Rectangle = new Rectangle( 0, 0, WebP.service.width, WebP.service.height );
//						var bd:BitmapData = new BitmapData( WebP.service.width, WebP.service.height, true );
//						bd.setPixels( rect, decodedData );
//						
//						imgPreview.source = new Bitmap(bd);
//						img.source = new Bitmap(bd);
//						
//						screenWidth = FlexGlobals.topLevelApplication.width;
//						screenHeight = FlexGlobals.topLevelApplication.height;
//						
//						box.cacheAsBitmap = true;
//						box.cacheAsBitmapMatrix = new Matrix();
//						
//						scaleYFactor = actualImageHeight / (img.height * 2);
//						scaleXFactor = actualImageWidth / (img.width * 2);
//						
//						//imgPreview.scaleX = scaleXFactor;
//						//imgPreview.scaleY = scaleYFactor;
//						
//						imgPreview.height = img.height * 2;
//						imgPreview.width = img.width * 2;
//					}
//*/					
//				}
			}
			
			protected function imgPreview_clickHandler(event:MouseEvent):void
			{
				//thumbnail.source = null;
				var ratioX:Number = img.sourceWidth / img.width;
				var ratioY:Number = img.sourceHeight / img.height;
				var xpoint:Number;
				var ypoint:Number;
				
				// for rotated image
				if(isImageRotated)
				{
					var xval:Number = img.height - event.localY;  //for praveen
					var yval:Number = event.localX;
					xpoint = (ratioY * xval) - ratioY + 1;
					ypoint = (ratioX * yval) - ratioX + 1;
				}
				else
				{
					xpoint = (ratioX * event.localX) - ratioX + 1;
					ypoint = (ratioY * event.localY) - ratioY + 1;
				}
				
				findPolygon(xpoint, ypoint, event.localX, event.localY);				
			}
			
			private function loadImageCoordinates(imageCoordinates:String):void
			{
				var objJson:Object = JSON.parse(imageCoordinates);
				
				for(var i:int = 0; i < objJson.length; i++)
				{
					var objPolygon:Polygon = new Polygon();
					objPolygon.upc = objJson[i].upc;
					
					var xPoints:Array = objJson[i].xPoints as Array;
					var yPoints:Array = objJson[i].yPoints as Array;
					var pl:PointSet = new PointSet();
					
					for(var j:int = 0; j < 4; j++)
					{
						var p:Point = new Point(Number(xPoints[j]), Number(yPoints[j]));
						pl.push(p);
					}
					
					objPolygon.pointSetList = pl;
					_arrPolygons.push(objPolygon);
				}
			}
			private function findPolygon(x:int, y:int, localX:int, localY:int):void
			{
				var p:Point = new Point(x, y);
				for(var i:int = 0; i < _arrPolygons.length; i++)
				{
					// if the clicked point is defined in the regions
					if(Polygon.pointInPolygon((_arrPolygons[i] as Polygon).pointSetList, p))
					{
						_objProductDetails = new ProductDetails();
						var popUpPosition:String = "bottom";
						if(img.height < img.width)
						{
							if(localX < (img.width/2))
								popUpPosition = "top";	
						}
						else
						{
							if(localY < (img.height/2))
								popUpPosition = "top";
						}
						
						
						selectedProduct = _arrPolygons[i] as Polygon;
						getProductDetails(selectedProduct, popUpPosition);
						break;
					}
				}
			}
			
			protected function processData():void 
			{
				var i:int = img.width;
				
				var ratioX:Number;
				var ratioY:Number;
				
				ratioX = img.sourceWidth / unscaledWidth;
				ratioY = img.sourceHeight / unscaledHeight;
				
				var result:Object = data.matadata;
				try
				{
					if ( (result.ResultSet.row as Array).length == 0)
					{
						ANEFunctions.callAlert("Oops!!!", result.ResultSet.row.Message);
					}
					else
					{
						var arrItems:Array = result.ResultSet.row as Array;
						tickContainer.removeAllElements();
						var coordinates:String = "[";
						for(var i:int = 0; i < arrItems.length; i++)
						{
							var tick:TickLabel = new TickLabel();
							
							if(isImageRotated)
							{
								ratioY = img.sourceWidth / unscaledHeight;
								ratioX = img.sourceHeight / unscaledWidth;
								tick.x = int((int(arrItems[i].LeftTopX)  + ratioX - 1) / ratioX);
								tick.y = int((int(arrItems[i].LeftTopY) + ratioY - 1) / ratioY);
							}
							else
							{
								tick.x = int( (Number(arrItems[i].LeftTopX) + ratioX - 1) / ratioX );
								tick.y = int( (Number(arrItems[i].LeftTopY) + ratioY - 1) / ratioY );	
							}
							
							tickContainer.addElement(tick);
							
							
							var arrLineData:Array = String(arrItems[i]).split(",");
							coordinates = coordinates + 
								'{"xPoints": ["' + 
									(Number(arrItems[i].LeftTopX)) + '", "' + 
									(Number(arrItems[i].LeftTopX)  + Number(arrItems[i].Width)) + '", "' + 
									(Number(arrItems[i].LeftTopX)  + Number(arrItems[i].Width)) + '", "' + 
									(Number(arrItems[i].LeftTopX) ) + 
								'"],' + 
								'"yPoints": ["' +
									(Number(arrItems[i].LeftTopY)) + '", "' + 
									(Number(arrItems[i].LeftTopY)) + '", "' + 
									(Number(arrItems[i].LeftTopY) + Number(arrItems[i].Height)) + '", "' +  
									(Number(arrItems[i].LeftTopY) +Number(arrItems[i].Height)) + 
								'"], ' +
								'"upc": "' + arrItems[i].Upc + '"},'; 
						}
						
						coordinates = coordinates.substr(0, coordinates.length-1);
						coordinates = coordinates + "]";

						loadImageCoordinates(coordinates);
					}
				}
				catch(error:*)
				{}
			}
			
			private function onUpdateComplete(event:FlexEvent):void
			{
				var imgContentWidth:Number = img.transform.pixelBounds.width;
				var imgContentHeight:Number = img.transform.pixelBounds.height;
				var calcWidth:int = (imgContentWidth * img.height) / imgContentHeight;
				var calcHeight:int = (imgContentHeight * img.width) / imgContentWidth;
				var leftPadding:int = (img.width - calcWidth)/2;
				var topPadding:int = (img.height - calcHeight)/2;
				
				if(imgContentHeight < imgContentWidth)
				{
					img.rotation = 90;
					isImageRotated = true;
				}
				else
				{
					isImageRotated = false;
				}
				
				img.scaleMode = ScaleMode.STRETCH;
				
				//processData();
				getImageData();
				
				img.removeEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
			}
			
			
			protected function getProductDetails_resultHandler(event:ResultEvent):void
			{
				var result:Object = JSON.parse(String(event.result));
				_objProductDetails = new ProductDetails();
				_objProductDetails.upc = result.ResultSet.row[0].upc;
				_objProductDetails.brandName = result.ResultSet.row[0].brand_name;
				_objProductDetails.attribute_1 = result.ResultSet.row[0].attribute_1;
				_objProductDetails.attribute_2 = result.ResultSet.row[0].attribute_2;
				_objProductDetails.longName = result.ResultSet.row[0].product_long_name;
				_objProductDetails.attribute_3 = result.ResultSet.row[0].attribute_3;
				_objProductDetails.attribute_4 = result.ResultSet.row[0].attribute_4;
				_objProductDetails.attribute_5 = result.ResultSet.row[0].attribute_5;
				_objProductDetails.price = selectedProduct.price;
				_objProductDetails.shortName = result.ResultSet.row[0].product_short_name;
				_objProductDetails.rating = result.ResultSet.row[0].product_rating;
				//_objProductDetails.thumbnailName = result.ResultSet.row[0].thumbnail;
				_objProductDetails.why_buy_1 = result.ResultSet.row[0].why_buy_1;
				_objProductDetails.why_buy_2 = result.ResultSet.row[0].why_buy_2;
				_objProductDetails.why_buy_3 = result.ResultSet.row[0].why_buy_3;
				_objProductDetails.why_buy_4 = result.ResultSet.row[0].why_buy_4;
				
				thumbnail.source = baseUrl + "getUpcImage?upc=" + _objProductDetails.upc;
				
				createRating();
				
				//loadWebP();
			}
			
			protected function getProductDetails_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			private function createRating():void
			{
				var rating:Number = _objProductDetails.rating;
				for(var i:int = 1; i <= 5; i++)
				{
					if(i <= rating)
					{
						ratingContainer.addElement(new FullStarLabel());
					}
					else
					{
						if( (i - rating) < 1 )
						{
							ratingContainer.addElement(new HalfStarLabel());
						}
						else
						{
							ratingContainer.addElement(new EmptyStarLabel());
						}
					}
				}
			}
			
			private function getProductDetails(p:Polygon, position:String):void
			{
				bg.visible = true;
				popup.visible = true;
				ratingContainer.removeAllElements();
				if(position == "bottom")
				{
					topSpacer.percentHeight = 0;
					bottomSpacer.percentHeight = 100;
				}
				else
				{
					topSpacer.percentHeight = 100;
					bottomSpacer.percentHeight = 0;
				}
			
				servGetProductDetails.url = baseUrl + "getUpcDetails?upc=" + p.upc;
				servGetProductDetails.send();
			}
			
			protected function bg_clickHandler(event:MouseEvent):void
			{
				bg.visible = false;
				popup.visible = false;
			}
			
			private function getImageData():void
			{
				var imageData:Object = data.imageData;
				//MetaInfo[0].imageUUID
				trace(imageData);
			}
			
		]]>
	</fx:Script>
	<s:Image id="img" width="100%" height="100%" verticalCenter="0" horizontalCenter="0" source="{data.capturedImage}" click="imgPreview_clickHandler(event)"/>
	<s:Group width="100%" height="100%" id="tickContainer"/>
	
	<s:Group width="100%" height="100%" id="bg" visible="false" click="bg_clickHandler(event)">
		<s:Rect width="100%" height="100%" alpha="0.5">
			<s:fill>
				<s:SolidColor color="#000000"/>
			</s:fill>
		</s:Rect>
	</s:Group>
	<s:Label id="info" bottom="50" left="10" color="#de3001"/>
	<s:Label id="info1" bottom="10" left="10" color="#de3001"/>
	<s:VGroup width="100%" height="100%">
		<s:Spacer id="topSpacer"/>
		<s:Group visible="false" width="100%" height="40%" id="popup" horizontalCenter="0">
			<s:Rect left="5" top="5" right="5" bottom="5">
				<s:fill>
					<s:SolidColor color="#FFFFFF"/>
				</s:fill>
			</s:Rect>	
			<s:Image id="thumbnail" width="100" height="130" top="15" left="15"/>
			<s:HGroup id="ratingContainer" top="15" left="125" gap="1" />
			<s:VGroup left="125" top="35" right="15">
				<s:VGroup gap="0" width="100%">
					<s:Label text="{StringUtil.trim(_objProductDetails.longName)}"  width="100%"  styleName="productNameStyle"/>
				</s:VGroup>
				<s:HGroup includeInLayout="{StringUtil.trim(_objProductDetails.attribute_1) != '' ? true:false}" visible="{StringUtil.trim(_objProductDetails.attribute_1) != '' ? true:false}" >
					<s:Label text="&#xe116;" styleName="starStyle" color="#b90404"/>
					<s:Label text="{' ' + StringUtil.trim(_objProductDetails.attribute_1)}"  width="100%" styleName="featureStyle"/>
				</s:HGroup>
				<s:HGroup includeInLayout="{StringUtil.trim(_objProductDetails.attribute_2) != '' ? true:false}" visible="{StringUtil.trim(_objProductDetails.attribute_2) != '' ? true:false}">
					<s:Label text="&#xe116;" styleName="starStyle" color="#b90404"/>
					<s:Label text="{' ' + StringUtil.trim(_objProductDetails.attribute_2)}" width="100%"  styleName="featureStyle"/>
				</s:HGroup>
				<s:HGroup includeInLayout="{StringUtil.trim(_objProductDetails.attribute_3) != '' ? true:false}" visible="{StringUtil.trim(_objProductDetails.attribute_3) != '' ? true:false}" >
					<s:Label text="&#xe116;" styleName="starStyle" color="#b90404"/>
					<s:Label text="{' ' + StringUtil.trim(_objProductDetails.attribute_3)}"  width="100%" styleName="featureStyle"/>
				</s:HGroup>
				<s:HGroup includeInLayout="{StringUtil.trim(_objProductDetails.attribute_4) != '' ? true:false}" visible="{StringUtil.trim(_objProductDetails.attribute_4) != '' ? true:false}" >
					<s:Label text="&#xe116;" styleName="starStyle" color="#b90404"/>
					<s:Label text="{' ' + StringUtil.trim(_objProductDetails.attribute_4)}"  width="100%" styleName="featureStyle"/>
				</s:HGroup>
				<s:HGroup includeInLayout="{StringUtil.trim(_objProductDetails.attribute_5) != '' ? true:false}" visible="{StringUtil.trim(_objProductDetails.attribute_5) != '' ? true:false}" >
					<s:Label text="&#xe116;" styleName="starStyle" color="#b90404"/>
					<s:Label text="{' ' + StringUtil.trim(_objProductDetails.attribute_5)}"  width="100%" styleName="featureStyle"/>
				</s:HGroup>
			</s:VGroup>
		</s:Group>
		<s:Spacer id="bottomSpacer"/>
	</s:VGroup>
</s:View>
